---
import { MoveLeft, MoveRight } from 'lucide-astro'
import PetCard from './PetCard.astro'
export interface Props {
  name: string
  dynamicAlt: string
}
const { name, dynamicAlt } = Astro.props
---

<div class="justify-center p-4 m-4 items-center slideshow w-[75vw] min-[450px]:w-auto">
  {Array.from({ length: 6 }).map((item, index) => <PetCard name={name} importLoc={`${name}${index+1}`} alt={dynamicAlt} />)}
  <div class="flex mt-2 w-full justify-between">
    <MoveLeft
    class="left hover:scale-110 active:scale-95 mr-2 w-10 h-10 p-2 border border-neutral-700 bg-neutral-800 rounded-lg clicks flex items-center justify-center cursor-pointer transition-transform duration-200 ease-in-out"
  />
  <MoveRight
  class="hover:scale-110 active:scale-95 ml-2 w-10 h-10 p-2 border border-neutral-700 bg-neutral-800 rounded-lg clicks flex items-center justify-center cursor-pointer transition-transform duration-200 ease-in-out"
  />
  </div>
</div>

<script>
  const slideshows = document.querySelectorAll('.slideshow')
  for (let i = 0; i < slideshows.length; i++) {
    const figures = Array.from(slideshows[i].querySelectorAll('.slideshow img'))
    const camiArr = figures as HTMLImageElement[]
    camiArr?.forEach(pic => {
      pic.loading = 'eager'
    })
    camiArr[0].style.display = 'block'
    let activeSlide = 0
    const buttons = slideshows[i].querySelectorAll('.clicks')
    buttons[0].addEventListener('click', () => {
      displaySlide(--activeSlide)
    })
    buttons[1].addEventListener('click', () => {
      displaySlide(++activeSlide)
    })
    function displaySlide(index: number) {
      activeSlide = (index + camiArr.length) % camiArr.length
      camiArr.forEach(figure => (figure.style.display = 'none'))
      camiArr[activeSlide].style.display = 'block'
      camiArr[activeSlide].classList.add('animate-slideshow')
    }
  }
</script>
